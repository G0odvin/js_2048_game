{"version":3,"sources":["scripts/main.js"],"names":["fieldRows","document","querySelector","rows","startGame","messageLose","messageWin","messageStart","gameScore","score","columns","field","gameStart","addTwoDeuces","updateHtml","filterZeros","row","filter","num","slide","newRow","i","length","isFinite","isWin","push","slideLeft","slideRight","reverse","slideUp","c","slideDown","r","updateCell","cells","innerText","cell","classList","value","className","add","style","display","isEmptyCell","Math","random","found","floor","isPossibleMove","remove","replace","addEventListener","innerHTML","e","preventDefault","contains","code"],"mappings":"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","file":"main.b0200230.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldRows = document.querySelector('tbody').rows;\nconst startGame = document.querySelector('.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\n\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction gameStart() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  addTwoDeuces();\n  addTwoDeuces();\n  updateHtml();\n};\n\nstartGame.addEventListener('click', () => {\n  startGame.classList.replace('start', 'restart');\n  startGame.innerHTML = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  gameScore.innerHTML = 0;\n  score = 0;\n\n  gameStart();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (!startGame.classList.contains('restart')) {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      addTwoDeuces();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      addTwoDeuces();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      addTwoDeuces();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      addTwoDeuces();\n      break;\n  }\n\n  if (!isPossibleMove()) {\n    messageLose.classList.remove('hidden');\n  }\n});\n\nfunction filterZeros(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterZeros(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      isWin(newRow[i]);\n    }\n  }\n\n  newRow = filterZeros(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nfunction slideLeft() {\n  for (let i = 0; i < rows; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n\n    updateHtml();\n  }\n};\n\nfunction slideRight() {\n  for (let i = 0; i < rows; i++) {\n    let row = field[i];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[i] = row;\n  }\n\n  updateHtml();\n};\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row = slide(row);\n\n    for (let i = 0; i < columns; i++) {\n      field[i][c] = row[i];\n    }\n  }\n\n  updateHtml();\n};\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      field[i][c] = row[i];\n    }\n  }\n\n  updateHtml();\n};\n\nfunction updateHtml() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentCell = fieldRows[r].cells[c];\n      const num = field[r][c];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  gameScore.innerText = score;\n};\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.innerText = num;\n    cell.classList.add(`field-cell--${num}`);\n  }\n\n  if (cell === 2048) {\n    messageWin.style.display = 'block';\n  }\n};\n\nfunction isEmptyCell() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (field[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction addTwoDeuces() {\n  if (!isEmptyCell()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (field[r][c] === 0) {\n      field[r][c] = value;\n      found = true;\n\n      updateHtml();\n    }\n  }\n};\n\nfunction isPossibleMove() {\n  let found = false;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (r < 3) {\n        if (field[r][c] === field[r + 1][c]\n          || field[r][c] === field[r][c + 1]) {\n          found = true;\n        }\n      } else {\n        if (field[r][c] === field[r][c + 1]) {\n          found = true;\n        }\n      }\n    }\n  }\n\n  if (!found && !isEmptyCell()) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction isWin(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startGame.classList.replace('restart', 'start');\n    startGame.innerText = 'Start';\n  }\n};\n"]}